#!/bin/bash

set -e

function print_usage() {
	echo "$(basename $0)"
	echo ""
	echo "usage:"
	echo ""
	echo "$(basename $0) [options]"
	echo ""
	echo "Options:"
	echo " -h help"
	echo " -d distribution          centos-stream|rhel-8 (default: centos-stream)"
	echo " -l                       list currently supported distro"
	echo " -w                       wipe all mock local caches"
	echo " -r                       wipe srpms and temporary repositories before and after build"
	echo " -s                       skip rebuilding srpms (debug only)"
	echo " -c                       skip refreshing chroot (debug only)"
	echo ""
}

function list_distros() {
	cd configs
	distros=$(ls -1 | sed -e 's#-mock.*##' -e 's#-package.*##g' | sort -u)
	for i in $distros; do
		if [ -f ${i}-mock.cfg.in ] && [ -f ${i}-package-list ]; then
			echo $i
		fi
	done
}

# required tools to build archive and stuff
tools="fedpkg mock wget rpmbuild createrepo"

# set defaults
distro=centos-stream
wipemock=0
wiperpm=0
skipsrpms=0
skipchroot=0

while getopts ":hd:lwrsc" optflags; do
	case "$optflags" in
		c)
			skipchroot=1
			;;
		d)
			distro="$OPTARG"
			;;
		l)
			list_distros
			exit 0
			;;
		r)
			wiperpm=1
			;;
		s)
			skipsrpms=1
			;;
		w)
			wipemock=1
			;;
		h)
			print_usage
			exit 0
			;;
		\?|:)
			print_usage
			exit 1
			;;
	esac
done

function check_requirements() {
	for i in $tools; do
		if [ -z "$(which $i 2>/dev/null)" ]; then
			echo "Error! $i missing from PATH"
			exit 1
		fi
	done
}

function check_distro() {
	for i in ${distro}-mock.cfg.in ${distro}-package-list; do
		if [ ! -f "configs/$i" ]; then
			echo "Error! Distribution ${distro} is currently missing configs/$i. Please add related config files"
			exit 1
		fi
	done
}

# functions below here can write files that needs to be removed

# set common variables

toplevel=$(pwd)
mockconfig=$(pwd)/${distro}/mock.cfg
localmockrepo=$(pwd)/${distro}/mockrepo
localsrpms=$(pwd)/${distro}/srpms
anvilsrpms=$(pwd)/srpms
finalrepo=$(pwd)/${distro}/finalrepo

function cleanup() {
	if [ "$wiperpm" = "1" ]; then
		rm -rf ${localmockrepo}
		rm -rf ${localsrpms}
	fi
	if [ "$wipemock" = "1" ]; then
		mock --scrub=all -r $mockconfig
		rm -rf $mockconfig
	fi
	if [ -n "$1" ]; then
		exit $1
	fi
}

function create_dirs() {
	mkdir -p $localmockrepo
	mkdir -p $localsrpms
	mkdir -p $finalrepo
}

function prep_mock_config() {
	cat configs/${distro}-mock.cfg.in | \
		sed -e 's#@LOCALREPO@#'$localmockrepo'/results/mock#g' \
		> ${mockconfig}
}

function init_mock() {
	if [ "$skipchroot" = "1" ]; then
		return
	fi
	if [ "$wipemock" = "1" ]; then
		mock --scrub=all -r $mockconfig
	else
		mock --scrub=chroot -r $mockconfig
	fi
	mock --init -r $mockconfig
	mock --update -r $mockconfig
}

# generate all srpms based on the list provided by config/${distro}-package-list
# if a package exists in srpms/ it will be given higher priority than
# downloading the sources from fedora via fedpkg
# packages in srpms/$PACKAGENAME must provide a build.sh script to
# generate the srpm

function prep_srpms() {
	if [ "$skipsrpms" = "1" ]; then
		return
	fi
	for i in $packagelist; do
		cd $localsrpms
		# check if local override exists
		if [ -d "$anvilsrpms/$i" ]; then
			echo "Local override for $i detected"
			cd "$anvilsrpms/$i"
			./build.sh
			mv *.src.rpm $localsrpms/
		else
			fedpkg co --anonymous $i
			cd $i
			fedpkg srpm
			mv *.src.rpm $localsrpms/
			cd -
			rm -rf $i
		fi
		cd $toplevel
	done
}

# concept of chain build is that we will continue to try builds
# till either all packages have built or stop with error
# after $number_of_package + 5 attemts

function build_rpms() {
	# add extra attempts in case we have network issues
	count=5
	for i in $packagelist; do
		count=$((count + 1))
	done

	current=0
	while [ $current -le $count ]; do
		if mock -r $mockconfig --localrepo=$localmockrepo --continue --chain $localsrpms/*.src.rpm; then
			echo "Built complited in $current loops"
			return
		fi
		current=$((current + 1))
	done
	exit 1
}

function build_final_repo() {
	# make sure the repo is clean
	rm -rf $finalrepo/*
	# copy the files, donÂ´t move them for debugging / caching
	find $localmockrepo -type f -name "*.rpm" -exec cp {} $finalrepo \;
	cd $finalrepo
	# create repo skeleton
	mkdir -p rpms/noarch
	mkdir -p rpms/$(uname -m)
	mkdir -p debuginfo
	mkdir -p srpms
	# move stuff in place
	mv *.src.rpm srpms/
	mv *debuginfo*.rpm *debugsource*.rpm debuginfo/
	mv *noarch*.rpm rpms/noarch/
	mv *.rpm rpms/$(uname -m)/
	# create repo here
	for i in rpms srpms debuginfo; do
		cd $i
		createrepo .
		cd -
	done
}

# main starts here

# install traps to clean up in case of errors
trap "cleanup 1" ABRT
trap "cleanup 1" QUIT
trap "cleanup 1" TERM
trap "cleanup 1" INT
trap "cleanup 1" ERR

check_requirements
check_distro

cleanup
create_dirs

# init mock
prep_mock_config
init_mock

# get package list (common to multiple functions)

. ./configs/${distro}-package-list

prep_srpms
build_rpms

build_final_repo

cleanup 0
